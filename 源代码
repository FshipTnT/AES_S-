#include <iostream>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
class AES_S{
public:
    int SBox[16][16];

    void init(){
    // SBox初始化
        SBox[0][0]=0;
        for(int i = 0 ; i < 16 ; i++){
            if(i != 0)
                SBox[i][0] = SBox[i-1][15] + 1;
            for(int j = 1 ; j < 16 ; j++){
                SBox[i][j] = SBox[i][j-1] + 1;
            }
        }
        printf("初始化：\n");
        for(int i = 0 ; i < 16 ; i++){
            for(int j = 0 ; j < 16 ; j++){
            printf("%c%c ",dec2Hex(SBox[i][j] / 16) ,dec2Hex(SBox[i][j] % 16));
            }
            printf("\n");
        }
        printf("\n");
    }

    //求逆元
    void exgcd(){
        printf("求逆元：\n");
        for(int i = 0 ; i < 16 ; i++){ 
            for(int j = 0 ; j < 16 ; j++){
                //规定00的逆元为自身00
                if (i==0 && j==0){
                    SBox[i][j]==dec2Hex(0);
                    printf("%c%c ",dec2Hex(SBox[i][j] / 16) ,dec2Hex(SBox[i][j] % 16));
                }
                else{
                   // 重要的就是Ext_Euclid算法，是拓展欧几里得算法，用于求整数在域上的逆元，参考的网上前辈的代码，感谢。
                   // 283为不可约多项式x^8+x4+x3+x+1(100011011)
                    SBox[i][j] = Ext_Euclid(SBox[i][j],283);
                    // dec2Hex：将整数转为16进制
                    printf("%c%c ",dec2Hex(SBox[i][j] / 16) ,dec2Hex(SBox[i][j] % 16)); 
                } 
                
            }
            printf("\n");
        }
        printf("\n");
    }

    // 将输入的整数的16进制对应字符返回，输入的整数在0~15之间
    char dec2Hex(int n){
        if(n >= 0 && n <= 9)
            return 48 + n;
        switch(n){
        case 10:return 'A';break;
        case 11:return 'B';break;
        case 12:return 'C';break;
        case 13:return 'D';break;
        case 14:return 'E';break;
        case 15:return 'F';break;
        }
        return ' ';
    }

    //计算一个十进制数的二进制表示时的位数有多大
    //直接计算右移了多少位就可
    int numb_bits(int v){
        int count=0;
        while(v>0){
            v=v>>1;
            count++;
        }
        return count;
    }

    //多项式除法
    int polydivide(int a,int b,int *remainder ){
        int tmp;
        int c=numb_bits(a)-numb_bits(b);
        int value=0;
        while(c>=0){
            value=value^(1<<c);
            tmp=b;//将被除数向左移c位再与a相与，并赋给a
            tmp=tmp<<c;
            a=a^tmp;
            c=numb_bits(a)-numb_bits(b);
        }
        *remainder=a;
        return value;
        }

    //多项式乘法
    int polyMulti(int a,int b){
        int value=a;
        int result=a;
        int r;
        if(a==0 || b==0)
            return 0;
        r=b%2;
        b=b/2;
        if(!r) //判断最后一位是0还是1,是0的话result就等于0
            result=0;
        while(b){
            r=b%2;
            b=b/2;
            if(value>>7) //b7为1,就要与00011011(即1b)相与
                value=(value<<1) & 0xff ^27;
            else
                value=(value<<1) & 0xff;
            if(r) //位为1的结果就参加异或运算
                result=result ^ value;
        }
        return result;
    }

    //扩展的欧几里德算法
    int Ext_Euclid(int a,int b){
        int tmp;
        if(a){ //交换除数与被除数的值
            tmp=a;
            a=b;
            b=tmp;
        }
        int x0 = 1,y0 = 0,x1 = 0,y1 = 1;//初始化条件
        int tmp1,tmp2;
        int r1 = a,r2 = b,q1;
        int i=1;
        //下面直接用扩展欧几里德算法来做
        while(r2){
            tmp1=r2;
            q1=polydivide(r1,r2,&r2);//r1对r2进行多项式除法，商存在q1,余数存在r2
            r1=tmp1;//这步比较重要，就是r1要变成上一次除法的被除数
            tmp1=x1;
            tmp2=y1;
            x1=x0 ^ polyMulti(q1,x1); //计算v,w;每一个v(x)*f(x)+w(x)*g(x)=1成立
            y1=y0 ^ polyMulti(q1,y1);
            x0=tmp1;
            y0=tmp2;
            i++;
        }
        return y0;
    }

    //放射变换
    void transforms(){
        printf("仿射变换：\n");
        for(int i = 0 , j = 0 ; i < 16 ; i++){
            for(j = 0 ; j < 16 ; j++){
                SBox[i][j] = transform(SBox[i][j]);
                printf("%c%c ",dec2Hex(SBox[i][j] / 16) ,dec2Hex(SBox[i][j] % 16));
            }
            printf("\n");
        }
    }

    int transform(int num){
        int n[8]; //输入bit
        int b[8]; //输出bit
        // int c[8] = {0,1,1,0,0,0,1,1};注意bit位方向
        int c[8] = {1,1,0,0,0,1,1,0};
        int i = 0;
        for(i = 0 ; i < 8 ; i++){
            n[i] = num % 2;
            num /= 2;
        } 
        int j = 1;
        for(i = 0 , num = 0 ; i < 8 ; i++){
        // 使用二进制移位来做更好，偷懒就不做了。
            b[i] = n[i] ^ n[(i+4)%8]
            ^ n[(i+5)%8]
            ^ n[(i+6)%8]
            ^ n[(i+7)%8]    
            ^ c[i];
            num += b[i] * j;
            j *= 2;
        }
        return num;
    }
};

int main(){
    AES_S a;
    //初始化s盒
    a.init();
    //将每一个字节变换为GF(8)中的乘法逆元素
    a.exgcd();
    //在GF(2)上做仿射变换
    a.transforms();
    system("pause");
    return 0;
}
